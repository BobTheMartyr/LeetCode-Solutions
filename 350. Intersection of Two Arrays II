// Runtime 47 ms Beats 96.72% || Memory 44.1 MB Beats 47.66%
// Solution for Hash Table Explore Card

var intersect = function( nums1, nums2 ){
    let largest = nums1.length >= nums2.length ? nums1 : nums2
    let smallest = nums1.length < nums2.length ? nums1 : nums2
    let map = new Map()
    for( let i = 0; i < largest.length; i++ ){
        if( map.has( largest[i] ) ){
            map.set( largest[i], map.get(largest[i]) + 1 )
        } else {
            map.set(largest[i], 1)
        }
    }
    let result = []
    for( let i = 0; i < smallest.length; i++ ){
        if( map.get(smallest[i]) > 0 ){
            map.set(smallest[i], map.get(smallest[i]) - 1)
            result.push(smallest[i])
        }
    }
    return result
}


// Runtime 52 ms Beats 94.70% || Memory 43.9 MB Beats 53.87%
// Two Pointer solution I stole because its neat

var intersect = function(nums1, nums2) {
    let sorted1 = nums1.sort((a,b) => a - b)
    let sorted2 = nums2.sort((a,b) => a - b).reverse()
    let joined = sorted1.concat(sorted2)
    let left = 0
    let right = joined.length - 1
    let res = []

    while( left < right && left < sorted1.length && (right - sorted1.length) >= 0){
        if( joined[left] == joined[right] ){
            res.push(joined[left])
            left++
            right--
            continue
        }
        joined[left] < joined[right] ? left++ : right--
    }
    return res
}
