// Runtime 141 ms Beats 25.69% || Memory 50.7 MB Beats 50.69%




// Individual Node Constructor
class ListNode{
    constructor(value, next){
        this.value = value = undefined ? 0 : value
        this.next = next = undefined ? null : next
    }
}

// Initialize the data structure
var MyLinkedList = function() {
    this.head = null
};

// Get the value of the index-th node of the list
MyLinkedList.prototype.get = function(index) {
    if( index < 0 || index >= this.getLength() ){return -1}
    let current = this.head
    for( let i = 0; i < index; i++ ){
        current = current.next
    }
    return current.value
};

// Add a node of value value before the first element of the linked list
MyLinkedList.prototype.addAtHead = function(value) {
    let node = new ListNode(value)
    node.next = this.head
    this.head = node
};

// Append a node of value value to the last element of the linked list
MyLinkedList.prototype.addAtTail = function(value) {
    if( this.head == null ){
        this.addAtHead(value)
        return
    }

    let node = new ListNode(value)
    let current = this.head
    while( current.next != null ){
        current = current.next
    }
    current.next = node
};

// Add a node of vlaue value before the index-th node in the linked list
// If index equals the length of the list, the node will be added to the end
// If index is > length; the node will not be added at all
MyLinkedList.prototype.addAtIndex = function(index, value) {
    if( index === 0 ){
        this.addAtHead(value)
        return
    }
    if( index === this.getLength() ){
        this.addAtTail(value)
        return
    }
    if( index > this.getLength() ){
        return;
    }

    let current = this.head
    let node = new ListNode(value)
    for( let i = 0; i < index - 1; i++ ){
        current = current.next
    }
    let next = current.next
    current.next = node
    node.next = next
};

// Delete the index-th node in the linked list
MyLinkedList.prototype.deleteAtIndex = function(index) {
    if( index < 0 || index >= this.getLength() ){
        return
    }
    if( index == 0 ){
        this.head = this.head.next
        return
    }

    let current = this.head
    for( let i = 0; i < index - 1; i++ ){
        current = current.next
    }
    current.next = current.next.next
};

MyLinkedList.prototype.getLength = function(){
    let len = 0, current = this.head
    while( current != null ){
        current = current.next
        len++
    }
    return len
}
