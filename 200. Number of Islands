// Runtime 157 ms Beats 11.69% || Memory 62.7 MB Beats 5.2%

var getAdjNeighbors = (i, j, grid, visited) => {
    const adjNeighbors = []

    if( i > 0 && !visited[i - 1][j] ) adjNeighbors.push([i - 1, j])
    if( i < grid.length - 1 && !visited[i + 1][j] ) adjNeighbors.push([i + 1, j])
        
    if( j > 0 && !visited[i][j - 1] ) adjNeighbors.push([i, j - 1])
    if( j < grid[0].length - 1 && !visited[i][j + 1] ) adjNeighbors.push([i, j + 1])

    return adjNeighbors
}

var dfs = (i, j, grid, visited) => {
    const stack = [[i,j]]
    let islandSize = 0

    while( stack.length ){
        let currNode = stack.pop()

        let [i,j] = currNode

        // Check if visited 
        if( visited[i][j] ) continue
        visited[i][j] = true

        // Check if cell is part of an island
        if( grid[i][j] === '0' ) continue
        islandSize++

        let adjNeighbors = getAdjNeighbors(i, j, grid, visited)
        stack.push(...adjNeighbors)

    }
    return islandSize > 0 ? true : false
        
}


var numIslands = function(grid) {
    
    const visited = grid.map(row => row.map(cell => false))
    let islandCount = 0

    for( let i = 0; i < grid.length; i++ ){
        for( let j = 0; j < grid[i].length; j++ ){
            if( dfs( i, j, grid, visited )) islandCount++
        }
    }


    return islandCount
};
